/*
	접근 : 정답을 위해 봐야 하는 것들만 보자! 
	투 포인터란?
		화살표 두 개에 의미를 부여해서 탐색 범위를 압축하는 방법!
		1. 1차원 배열 위에 2개의 포인터를 만드는 경우
			1-1. 2개의 포인터가 모두 왼쪽에서 시작해서 같은 방향으로 이동
			1-2 2개의 포인터가 양 끝에서 서로를 향해 이동
		2. 관찰을 통해서 문제에 등장하는 변수 2개의 값을 두 포인터로 표현하는 경우

		꿀팁
		키워드
			- 1차원 배열에서의 "연속 부분 수열" or "순서를 지키며 차례대로"
			- 곱의 최소
			=> 이런 단어가 등장하면 Two Pointer 접근을 시도해 볼 가치가 있다!

	투 포인터 알고리즘 설명
	1. 시작점(start)과 끝점(end)이 첫 번째 원소의 인덱스(0)를 가리키도록 한다.
	2. 현재 부분 합이 M과 같다면, 카운트 한다.
	3. 현재 부분 합이 M보다 작거나 같다면, end를 1 증가시킨다.
	4. 현재 부분 합이 M보다 크다면, start를 1 증가시킨다.
	5. 모든 경우를 확인할 때까지 2번부터 4번까지의 과정을 반복한다.

	
*/

function solution() {
  const R = 0;
  const sum = 0;
  const answer = n + 1;
  for (let L = 1; L <= n; L++) {
    // L -1을 구간에서 제외하기
    // R을 옮길 수 있을 때 까지 옮기기
    // [L...R]의 합, 즉 sum이 조건을 만족하면 정답 갱신하기
  }

  // answer 값을 보고 불가능 판단하기
  console.log(answer);
}
